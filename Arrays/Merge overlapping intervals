/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        
        if(intervals == null || intervals.size() <= 1) return intervals;
        
        Collections.sort(intervals, new Comparator<Interval>(){
            
            public int compare(Interval a, Interval b) {
                
                int x = a.start;
                int y = b.start;
                
                return x - y;
            }
        });
        
        int n = intervals.size();
        
        ArrayList<Interval> arr = new ArrayList<>();
        
        for(int i = 0; i < n - 1; i++) {
            
            Interval curr = intervals.get(i);
            Interval next = intervals.get(i + 1);
            
            if(curr.end >= next.start) {
                next.start = Math.min(curr.start, next.start);
                next.end = Math.max(curr.end, next.end);
                
            } else {
                arr.add(curr);
            }
            
        }
        arr.add(intervals.get(n-1));
        
        return arr;
    }
}
